Algorithms for the cube.

Premise:

White-0
Red-1
Blue-2
Yellow-3
Orange-4
Green-5

Side n is opposite side (n+3)%6

Side indeces:
00 01 02
10 11 12
20 21 22

Sides that should be the top if you are facing this side:
White-Orange
Red-White
Blue-White
Yellow-Red
Orange-White
Green-White

Moves:
f-flip
r-right
g-grip toggle

Definitions:
l-left-rrr
dy-bottom cw-glg
dp-bottom ccw-grg
ty-top cw-ffdyff
tp-top ccw-ffdpff
fy-front cw-fdyfff
fp-front ccw-fdpfff
by-back cw-fffdyf
bp-back ccw-fffdpf
ry-right cw-rfyl
rp-right ccw-rfpl
ly-left cw-lfyr
lp-left ccw-lfpr

Algorithm:

Inspection:
Until find white: lfr, check, f, repeat
f, save colour, rrf, Blue-l, Orange-rr, Green-r
save-White, f, save-Orange, f, save-Yellow, f, save-Red, rf, save-Green, ff, save-Blue, lfl

White Cross:
Do for pieces WR, WB, WO, WG
Find piece on cube, if in location, return, else if bottom layer upside down, dy until on same side, rotatey side twice, else if bottom layer right side up dy side to the righty side to the frontp side to the rightp, else if middle row r until front right, fydyfp

White Face:

Second Layer:
Do for pieces RB, BO, OG, RG
Find piece on cube, if in location, return, else if other location, run on that location and repeat, else dy until colour matches center then r until side facing forward, then inspect if left or right, if right dprpdyrydyfydpfp else dylydplpdpfpdyfy

ff

Yellow Cross:
count aligned edges, if 4 return, else if 0, fy perform algorithm fp, repeat, else if 2 adjacent r until TF and TR solved byrfl perform algorithm bplfr, else fy perform algorithm fp

Yellow Corners:
count aligned corners, if 4 return, else if 1 r until front left is solved, then perform algorithm then repeat, else r until TFL + FTR + RTB + BTR = 1 then rytyrptyrytytyrp, repeat

Yellow Edges:
count solved edges, if 4 return, else if opposite, perform algorithm, repeat, else if 2 adjacent ty, repeat, else if 1 r until back is solved, then ryrytyrytyrptprptprptyrp, repeat

Solve:
count solved corners, if 0 perform algorithm, repeat, else if 4 return, else r until UFL is solved, then rpfyrpbybyryfprpbybyryry, repeat